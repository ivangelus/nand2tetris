// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    // Presetting input (x, y)
    Mux16(a=x,b[0..15]=false,sel=zx,out=zdx); // Zero the x
    Not16(in=zdx,out=notx);                   // !x
    Mux16(a=zdx,b=notx,sel=nx,out=ndx);       // x || !x

    Mux16(a=y,b[0..15]=false,sel=zy,out=zdy);  // Zero the y
    Not16(in=zdy,out=noty);                    // !y
    Mux16(a=zdy,b=noty,sel=ny,out=ndy);        // y || !y

    // function + || &
    Add16(a=ndx,b=ndy,out=xplusy);             // x + y
    And16(a=ndx,b=ndy,out=xandy);              // x & y
    Mux16(a=xandy,b=xplusy,sel=f,out=fxy);     // choose f

    Not16(in=fxy,out=nfxy);                    // !out
    Mux16(a=fxy,b=nfxy,sel=no,out=oo, out[0..7]=outleft, out[8..15]=outright);         // out || !out

    // output

    // zr
    Or8Way(in=outleft, out=zrl);
    Or8Way(in=outright, out=zrr);
    Or(a=zrl, b=zrr, out=nzr);
    Not(in=nzr, out=zr);

    // ng
    And16(a[0..15]=true,b=oo,out[15]=ng,out[0..14]=drop);

    // out
    Or16(a=oo,b[0..15]=false,out=out);
}